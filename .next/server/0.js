exports.ids = [0];
exports.modules = {

/***/ "./node_modules/@apollo/client/react/ssr/ssr.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/react/ssr/ssr.cjs ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = __webpack_require__(/*! tslib */ \"tslib\");\nvar React = __webpack_require__(/*! rehackt */ \"rehackt\");\nvar context = __webpack_require__(/*! ../context */ \"./node_modules/@apollo/client/react/context/context.cjs\");\nvar trie = __webpack_require__(/*! @wry/trie */ \"./node_modules/@wry/trie/lib/bundle.cjs\");\nvar cache = __webpack_require__(/*! ../../cache */ \"./node_modules/@apollo/client/cache/cache.cjs\");\nvar server = __webpack_require__(/*! react-dom/server */ \"react-dom/server\");\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        for (var k in e) {\n            n[k] = e[k];\n        }\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nfunction makeQueryInfoTrie() {\n    return new trie.Trie(false, function () { return ({\n        seen: false,\n        observable: null,\n    }); });\n}\nvar RenderPromises =  (function () {\n    function RenderPromises() {\n        this.queryPromises = new Map();\n        this.queryInfoTrie = makeQueryInfoTrie();\n        this.stopped = false;\n    }\n    RenderPromises.prototype.stop = function () {\n        if (!this.stopped) {\n            this.queryPromises.clear();\n            this.queryInfoTrie = makeQueryInfoTrie();\n            this.stopped = true;\n        }\n    };\n    RenderPromises.prototype.registerSSRObservable = function (observable) {\n        if (this.stopped)\n            return;\n        this.lookupQueryInfo(observable.options).observable = observable;\n    };\n    RenderPromises.prototype.getSSRObservable = function (props) {\n        return this.lookupQueryInfo(props).observable;\n    };\n    RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n        if (!this.stopped) {\n            var info = this.lookupQueryInfo(queryInstance.getOptions());\n            if (!info.seen) {\n                this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n                    resolve(queryInstance.fetchData());\n                }));\n                return null;\n            }\n        }\n        return finish ? finish() : null;\n    };\n    RenderPromises.prototype.addObservableQueryPromise = function (obsQuery) {\n        return this.addQueryPromise({\n            getOptions: function () { return obsQuery.options; },\n            fetchData: function () {\n                return new Promise(function (resolve) {\n                    var sub = obsQuery.subscribe({\n                        next: function (result) {\n                            if (!result.loading) {\n                                resolve();\n                                sub.unsubscribe();\n                            }\n                        },\n                        error: function () {\n                            resolve();\n                            sub.unsubscribe();\n                        },\n                        complete: function () {\n                            resolve();\n                        },\n                    });\n                });\n            },\n        });\n    };\n    RenderPromises.prototype.hasPromises = function () {\n        return this.queryPromises.size > 0;\n    };\n    RenderPromises.prototype.consumeAndAwaitPromises = function () {\n        var _this = this;\n        var promises = [];\n        this.queryPromises.forEach(function (promise, queryInstance) {\n            _this.lookupQueryInfo(queryInstance).seen = true;\n            promises.push(promise);\n        });\n        this.queryPromises.clear();\n        return Promise.all(promises);\n    };\n    RenderPromises.prototype.lookupQueryInfo = function (props) {\n        return this.queryInfoTrie.lookup(props.query, cache.canonicalStringify(props.variables));\n    };\n    return RenderPromises;\n}());\n\nfunction getDataFromTree(tree, context) {\n    if (context === void 0) { context = {}; }\n    return getMarkupFromTree({\n        tree: tree,\n        context: context,\n        renderFunction: server.renderToStaticMarkup,\n    });\n}\nfunction getMarkupFromTree(_a) {\n    var tree = _a.tree, _b = _a.context, context$1 = _b === void 0 ? {} : _b,\n    _c = _a.renderFunction,\n    renderFunction = _c === void 0 ? server.renderToStaticMarkup : _c;\n    var renderPromises = new RenderPromises();\n    function process() {\n        var ApolloContext = context.getApolloContext();\n        return new Promise(function (resolve) {\n            var element = React__namespace.createElement(ApolloContext.Provider, { value: tslib.__assign(tslib.__assign({}, context$1), { renderPromises: renderPromises }) }, tree);\n            resolve(renderFunction(element));\n        })\n            .then(function (html) {\n            return renderPromises.hasPromises() ?\n                renderPromises.consumeAndAwaitPromises().then(process)\n                : html;\n        })\n            .finally(function () {\n            renderPromises.stop();\n        });\n    }\n    return Promise.resolve().then(process);\n}\n\nfunction renderToStringWithData(component) {\n    return getMarkupFromTree({\n        tree: component,\n        renderFunction: server.renderToString,\n    });\n}\n\nexports.RenderPromises = RenderPromises;\nexports.getDataFromTree = getDataFromTree;\nexports.getMarkupFromTree = getMarkupFromTree;\nexports.renderToStringWithData = renderToStringWithData;\n//# sourceMappingURL=ssr.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@apollo/client/react/ssr/ssr.cjs\n");

/***/ })

};;