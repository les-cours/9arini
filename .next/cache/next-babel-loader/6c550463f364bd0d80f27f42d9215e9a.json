{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport var addItemToCart = function addItemToCart(cartItems, cartItemToAdd) {\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToAdd.id;\n  });\n  if (existingCartItem) {\n    return cartItems.map(function (cartItem) {\n      return cartItem.id === cartItemToAdd.id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n        quantity: cartItem.quantity + 1\n      }) : cartItem;\n    });\n  }\n  return [].concat(_toConsumableArray(cartItems), [_objectSpread(_objectSpread({}, cartItemToAdd), {}, {\n    quantity: 1\n  })]);\n};\nexport var removeItemFromCart = function removeItemFromCart(cartItems, cartItemToRemove) {\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToRemove.id;\n  });\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(function (cartItem) {\n      return cartItem.id !== cartItemToRemove.id;\n    });\n  }\n  return cartItems.map(function (cartItem) {\n    return cartItem.id === cartItemToRemove.id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n      quantity: cartItem.quantity - 1\n    }) : cartItem;\n  });\n};\nexport function calcCartItemsTotal(cartItems) {\n  return cartItems.reduce(function (prev, cur) {\n    return prev + cur.quantity * cur.price;\n  }, 0);\n}\n// addToCart = () => {\n//   let cart = localStorage.getItem('cart')\n//                 ? JSON.parse(localStorage.getItem('cart')) : {};\n//   let id = this.props.product.id.toString();\n//   cart[id] = (cart[id] ? cart[id]: 0);\n//   let qty = cart[id] + parseInt(this.state.quantity);\n//   if (this.props.product.available_quantity < qty) {\n//     cart[id] = this.props.product.available_quantity;\n//   } else {\n//     cart[id] = qty\n//   }\n//   localStorage.setItem('cart', JSON.stringify(cart));\n// }\n\n// componentDidMount() {\n//   let cart = localStorage.getItem('cart');\n//   if (!cart) return;\n//   getCartProducts(cart).then((products) => {\n//     let total = 0;\n//     for (var i = 0; i < products.length; i++) {\n//       total += products[i].price * products[i].qty;\n//     }\n//     this.setState({ products, total });\n//     });\n// }\n// removeFromCart = (product) => {\n//   let products = this.state.products.filter((item) => item.id !== product.id);\n//   let cart = JSON.parse(localStorage.getItem('cart'));\n//   delete cart[product.id.toString()];\n//   localStorage.setItem('cart', JSON.stringify(cart));\n//   let total = this.state.total - (product.qty * product.price)\n//   this.setState({products, total});\n// }\n// clearCart = () => {\n//   localStorage.removeItem('cart');\n//   this.setState({products: []});\n// }","map":{"version":3,"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","_objectSpread","quantity","concat","_toConsumableArray","removeItemFromCart","cartItemToRemove","filter","calcCartItemsTotal","reduce","prev","cur","price"],"sources":["/home/chouaib/code/learn/frontend/contexts/cart/cart.utils.ts"],"sourcesContent":["export const addItemToCart = (cartItems: any, cartItemToAdd: any) => {\n  const existingCartItem = cartItems.find(\n    (cartItem: any) => cartItem.id === cartItemToAdd.id\n  );\n  if (existingCartItem) {\n    return cartItems.map((cartItem: any) =>\n      cartItem.id === cartItemToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];\n};\nexport const removeItemFromCart = (cartItems: any, cartItemToRemove: any) => {\n  const existingCartItem = cartItems.find(\n    (cartItem: any) => cartItem.id === cartItemToRemove.id\n  );\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(\n      (cartItem: any) => cartItem.id !== cartItemToRemove.id\n    );\n  }\n  return cartItems.map((cartItem: any) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nexport function calcCartItemsTotal(cartItems: any) {\n  return cartItems.reduce(\n    (prev: any, cur: any) => prev + cur.quantity * cur.price,\n    0\n  );\n}\n// addToCart = () => {\n//   let cart = localStorage.getItem('cart')\n//                 ? JSON.parse(localStorage.getItem('cart')) : {};\n//   let id = this.props.product.id.toString();\n//   cart[id] = (cart[id] ? cart[id]: 0);\n//   let qty = cart[id] + parseInt(this.state.quantity);\n//   if (this.props.product.available_quantity < qty) {\n//     cart[id] = this.props.product.available_quantity;\n//   } else {\n//     cart[id] = qty\n//   }\n//   localStorage.setItem('cart', JSON.stringify(cart));\n// }\n\n// componentDidMount() {\n//   let cart = localStorage.getItem('cart');\n//   if (!cart) return;\n//   getCartProducts(cart).then((products) => {\n//     let total = 0;\n//     for (var i = 0; i < products.length; i++) {\n//       total += products[i].price * products[i].qty;\n//     }\n//     this.setState({ products, total });\n//     });\n// }\n// removeFromCart = (product) => {\n//   let products = this.state.products.filter((item) => item.id !== product.id);\n//   let cart = JSON.parse(localStorage.getItem('cart'));\n//   delete cart[product.id.toString()];\n//   localStorage.setItem('cart', JSON.stringify(cart));\n//   let total = this.state.total - (product.qty * product.price)\n//   this.setState({products, total});\n// }\n// clearCart = () => {\n//   localStorage.removeItem('cart');\n//   this.setState({products: []});\n// }\n"],"mappings":";;;;AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,SAAc,EAAEC,aAAkB,EAAK;EACnE,IAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAI,CACrC,UAACC,QAAa;IAAA,OAAKA,QAAQ,CAACC,EAAE,KAAKJ,aAAa,CAACI,EAAE;EAAA,CACrD,CAAC;EACD,IAAIH,gBAAgB,EAAE;IACpB,OAAOF,SAAS,CAACM,GAAG,CAAC,UAACF,QAAa;MAAA,OACjCA,QAAQ,CAACC,EAAE,KAAKJ,aAAa,CAACI,EAAE,GAAAE,aAAA,CAAAA,aAAA,KACvBH,QAAQ;QAAEI,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ,GAAG;MAAC,KAC9CJ,QAAQ;IAAA,CACd,CAAC;EACH;EACA,UAAAK,MAAA,CAAAC,kBAAA,CAAWV,SAAS,IAAAO,aAAA,CAAAA,aAAA,KAAON,aAAa;IAAEO,QAAQ,EAAE;EAAC;AACvD,CAAC;AACD,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIX,SAAc,EAAEY,gBAAqB,EAAK;EAC3E,IAAMV,gBAAgB,GAAGF,SAAS,CAACG,IAAI,CACrC,UAACC,QAAa;IAAA,OAAKA,QAAQ,CAACC,EAAE,KAAKO,gBAAgB,CAACP,EAAE;EAAA,CACxD,CAAC;EACD,IAAIH,gBAAgB,CAACM,QAAQ,KAAK,CAAC,EAAE;IACnC,OAAOR,SAAS,CAACa,MAAM,CACrB,UAACT,QAAa;MAAA,OAAKA,QAAQ,CAACC,EAAE,KAAKO,gBAAgB,CAACP,EAAE;IAAA,CACxD,CAAC;EACH;EACA,OAAOL,SAAS,CAACM,GAAG,CAAC,UAACF,QAAa;IAAA,OACjCA,QAAQ,CAACC,EAAE,KAAKO,gBAAgB,CAACP,EAAE,GAAAE,aAAA,CAAAA,aAAA,KAC1BH,QAAQ;MAAEI,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ,GAAG;IAAC,KAC9CJ,QAAQ;EAAA,CACd,CAAC;AACH,CAAC;AAED,OAAO,SAASU,kBAAkBA,CAACd,SAAc,EAAE;EACjD,OAAOA,SAAS,CAACe,MAAM,CACrB,UAACC,IAAS,EAAEC,GAAQ;IAAA,OAAKD,IAAI,GAAGC,GAAG,CAACT,QAAQ,GAAGS,GAAG,CAACC,KAAK;EAAA,GACxD,CACF,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}