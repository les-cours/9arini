{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nlet apolloClient;\nfunction createApolloClient() {\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // const token = getToken();\n    const token = process.env.NEXT_PUBLIC_GITHUB_AUTH_TOKEN;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? `Bearer ${token}` : ''\n      })\n    };\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_GITHUB_CLIENT_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin'\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n}\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (true) return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","setContext","apolloClient","createApolloClient","authLink","_","headers","token","process","env","NEXT_PUBLIC_GITHUB_AUTH_TOKEN","_objectSpread","authorization","httpLink","uri","NEXT_PUBLIC_APOLLO_GITHUB_CLIENT_URL","credentials","ssrMode","link","concat","cache","initializeApollo","initialState","_apolloClient2","_apolloClient","existingCache","extract","restore","useApollo","store"],"sources":["/home/chouaib/code/learn/frontend/apollo/github.client.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nlet apolloClient;\n\nfunction createApolloClient() {\n  const authLink = setContext((_, { headers }) => {\n    // const token = getToken();\n    const token = process.env.NEXT_PUBLIC_GITHUB_AUTH_TOKEN;\n\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_GITHUB_CLIENT_URL, // Server URL (must be absolute)\n    credentials: 'same-origin',\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"],"mappings":";;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,YAAY,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,gBAAgB;AACtE,SAASC,UAAU,QAAQ,6BAA6B;AAExD,IAAIC,YAAY;AAEhB,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAC,EAAE;IAAEC;EAAQ,CAAC,KAAK;IAC9C;IACA,MAAMC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B;IAEvD,OAAO;MACLJ,OAAO,EAAAK,aAAA,CAAAA,aAAA,KACFL,OAAO;QACVM,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;MAAE;IAEjD,CAAC;EACH,CAAC,CAAC;EACF,MAAMM,QAAQ,GAAG,IAAId,QAAQ,CAAC;IAC5Be,GAAG,EAAEN,OAAO,CAACC,GAAG,CAACM,oCAAoC;IAAE;IACvDC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAO,IAAIlB,YAAY,CAAC;IACtBmB,OAAO,MAA+B;IACtCC,IAAI,EAAEd,QAAQ,CAACe,MAAM,CAACN,QAAQ,CAAC;IAC/BO,KAAK,EAAE,IAAIpB,aAAa,CAAC;EAC3B,CAAC,CAAC;AACJ;AAEA,OAAO,SAASqB,gBAAgBA,CAACC,YAAY,GAAG,IAAI,EAAE;EAAA,IAAAC,cAAA;EACpD,MAAMC,aAAa,IAAAD,cAAA,GAAGrB,YAAY,cAAAqB,cAAA,cAAAA,cAAA,GAAIpB,kBAAkB,CAAC,CAAC;;EAE1D;EACA;EACA,IAAImB,YAAY,EAAE;IAChB;IACA,MAAMG,aAAa,GAAGD,aAAa,CAACE,OAAO,CAAC,CAAC;IAC7C;IACA;IACAF,aAAa,CAACJ,KAAK,CAACO,OAAO,CAAAhB,aAAA,CAAAA,aAAA,KAAMc,aAAa,GAAKH,YAAY,CAAE,CAAC;EACpE;EACA;EACA,UAAmC,OAAOE,aAAa;EACvD;EACA,IAAI,CAACtB,YAAY,EAAEA,YAAY,GAAGsB,aAAa;EAE/C,OAAOA,aAAa;AACtB;AAEA,OAAO,SAASI,SAASA,CAACN,YAAY,EAAE;EACtC,MAAMO,KAAK,GAAGhC,OAAO,CAAC,MAAMwB,gBAAgB,CAACC,YAAY,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAC3E,OAAOO,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module"}