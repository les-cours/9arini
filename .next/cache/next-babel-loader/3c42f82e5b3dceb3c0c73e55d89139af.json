{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.resolveHref = resolveHref;\nexports.markLoadingError = markLoadingError;\nexports.default = void 0;\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\nvar _utils = require(\"../utils\");\nvar _isDynamic = require(\"./utils/is-dynamic\");\nvar _routeMatcher = require(\"./utils/route-matcher\");\nvar _routeRegex = require(\"./utils/route-regex\");\nvar _querystring = require(\"./utils/querystring\");\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} /* global __NEXT_DATA__ */ // tslint:disable:no-console\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\nfunction hasBasePath(path) {\n  return path === basePath || path.startsWith(basePath + '/');\n}\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return basePath && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(basePath) : basePath + path : path;\n}\nfunction delBasePath(path) {\n  return path.slice(basePath.length) || '/';\n} /**\n  * Detects whether a given url is routable by the Next.js router (browser only).\n  */\nfunction isLocalURL(url) {\n  if (url.startsWith('/')) return true;\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils.getLocationOrigin)();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n} /**\n  * Resolves a given hyperlink with a certain router state (basePath not included).\n  * Preserves absolute urls.\n  */\nfunction resolveHref(currentPath, href) {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n');\n  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href);\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname); // if the origin didn't change, it means we received a relative href\n    return finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n  } catch (_) {\n    return urlAsString;\n  }\n}\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR');\nfunction markLoadingError(err) {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {});\n}\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as\n  };\n}\nfunction tryParseRelativeUrl(url) {\n  try {\n    return (0, _parseRelativeUrl.parseRelativeUrl)(url);\n  } catch (err) {\n    if (true) {\n      setTimeout(() => {\n        throw new Error(`Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`);\n      }, 0);\n    }\n    return null;\n  }\n}\nconst manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && false && 'scrollRestoration' in window.history;\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n      throw new Error(`Failed to load static props`);\n    }\n    return res.json();\n  });\n}\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err);\n    }\n    throw err;\n  });\n}\nclass Router {\n  /**\n  * Map of all components loaded in `Router`\n  */ // Static Data Cache\n  constructor(_pathname, _query, _as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback\n  }) {\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this.onPopState = e => {\n      const state = e.state;\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      }\n      if (!state.__N) {\n        return;\n      }\n      const {\n        url,\n        as,\n        options\n      } = state;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n      this.change('replaceState', url, as, options);\n    }; // represents the current component key\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n    // @ts-ignore this is temporarily global (attached to window)\n    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    if (false) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)());\n      }\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n          let scrollDebounceTimeout;\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout);\n            scrollDebounceTimeout = setTimeout(() => {\n              const {\n                url,\n                as: curAs,\n                options\n              } = history.state;\n              this.changeState('replaceState', url, curAs, Object.assign({}, options, {\n                _N_X: window.scrollX,\n                _N_Y: window.scrollY\n              }));\n            }, 10);\n          };\n          window.addEventListener('scroll', debouncedScrollSave);\n        }\n      }\n    }\n  }\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n    const newData = Object.assign({}, data, {\n      Component,\n      __N_SSG: mod.__N_SSG,\n      __N_SSP: mod.__N_SSP\n    });\n    this.components[route] = newData; // pages/_app.js updated\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n  reload() {\n    window.location.reload();\n  } /**\n    * Go back in history\n    */\n  back() {\n    window.history.back();\n  } /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  push(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  } /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  replace(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n  async change(method, url, as, options) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute);\n    }\n    const cleanedAs = hasBasePath(as) ? delBasePath(as) : as;\n    this._inFlightRoute = as; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!options._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as);\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route]);\n      Router.events.emit('hashChangeComplete', as);\n      return true;\n    }\n    const parsed = tryParseRelativeUrl(url);\n    if (!parsed) return false;\n    let {\n      pathname,\n      searchParams\n    } = parsed;\n    const query = (0, _querystring.searchParamsToUrlQuery)(searchParams); // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState';\n    }\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    const {\n      shallow = false\n    } = options;\n    if ((0, _isDynamic.isDynamicRoute)(route)) {\n      const {\n        pathname: asPathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(cleanedAs);\n      const routeRegex = (0, _routeRegex.getRouteRegex)(route);\n      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n      if (!routeMatch) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n          throw new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` + `Read more: https://err.sh/vercel/next.js/incompatible-href-as`);\n        }\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n    Router.events.emit('routeChangeStart', as);\n    try {\n      const routeInfo = await this.getRouteInfo(route, pathname, query, as, shallow);\n      const {\n        error\n      } = routeInfo;\n      Router.events.emit('beforeHistoryChange', as);\n      this.changeState(method, url, as, options);\n      if (true) {\n        const appComp = this.components['/_app'].Component;\n        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n      }\n      await this.set(route, pathname, query, cleanedAs, routeInfo);\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs);\n        throw error;\n      }\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo(options._N_X, options._N_Y);\n        }\n      }\n      Router.events.emit('routeChangeComplete', as);\n      return true;\n    } catch (err) {\n      if (err.cancelled) {\n        return false;\n      }\n      throw err;\n    }\n  }\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true\n      },\n      // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n  async handleRouteInfoError(err, pathname, query, as, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError();\n    }\n    try {\n      const {\n        page: Component\n      } = await this.fetchComponent('/_error');\n      const routeInfo = {\n        Component,\n        err,\n        error: err\n      };\n      try {\n        routeInfo.props = await this.getInitialProps(Component, {\n          err,\n          pathname,\n          query\n        });\n      } catch (gipErr) {\n        console.error('Error in error page `getInitialProps`: ', gipErr);\n        routeInfo.props = {};\n      }\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true);\n    }\n  }\n  async getRouteInfo(route, pathname, query, as, shallow = false) {\n    try {\n      const cachedRouteInfo = this.components[route];\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo;\n      }\n      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n      let dataHref;\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n          pathname,\n          query\n        }), as, __N_SSG);\n      }\n      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component,\n      // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      }));\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as);\n    }\n  }\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data);\n  } /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n    const idEl = document.getElementById(hash);\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0];\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  } /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n  async prefetch(url, asPath = url, options = {}) {\n    const parsed = tryParseRelativeUrl(url);\n    if (!parsed) return;\n    const {\n      pathname\n    } = parsed; // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (true) {\n      return;\n    }\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    await Promise.all([this.pageLoader.prefetchData(url, asPath), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n  async fetchComponent(route) {\n    let cancelled = false;\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n    const componentResult = await this.pageLoader.loadPage(route);\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    return componentResult;\n  }\n  _getData(fn) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n      return data;\n    });\n  }\n  _getStaticData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n    if (false && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey]);\n    }\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n  _getServerData(dataHref) {\n    return fetchNextData(dataHref, this.isSsr);\n  }\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const AppTree = this._wrapApp(App);\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n  abortComponentLoad(as) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n  notify(data) {\n    return this.sub(data, this.components['/_app'].Component);\n  }\n}\nexports.default = Router;\nRouter.events = (0, _mitt.default)();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["basePath","process","env","__NEXT_ROUTER_BASEPATH","buildCancellationError","Object","assign","Error","cancelled","hasBasePath","path","startsWith","addBasePath","delBasePath","slice","length","isLocalURL","url","locationOrigin","resolved","URL","origin","pathname","_","resolveHref","currentPath","href","base","urlAsString","finalUrl","PAGE_LOAD_ERROR","Symbol","markLoadingError","err","defineProperty","prepareUrlAs","router","as","tryParseRelativeUrl","setTimeout","manualScrollRestoration","__NEXT_SCROLL_RESTORATION","window","history","fetchRetry","attempts","credentials","then","res","ok","status","json","fetchNextData","dataHref","isServerRender","catch","Router","route","query","asPath","components","sdc","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","_inFlightRoute","constructor","initialProps","App","wrapApp","Component","subscription","props","__N_SSG","__N_SSP","__NEXT_DATA__","autoExport","substr","changeState","addEventListener","onPopState","scrollRestoration","scrollDebounceTimeout","debouncedScrollSave","clearTimeout","curAs","options","state","_N_X","scrollX","_N_Y","scrollY","e","__N","change","update","mod","default","data","newData","notify","reload","location","back","push","replace","method","_h","ST","performance","mark","abortComponentLoad","cleanedAs","onlyAHashChange","emit","scrollToHash","parsed","searchParams","urlIsNew","shallow","asPathname","routeRegex","routeMatch","missingParams","keys","groups","filter","param","console","warn","join","routeInfo","getRouteInfo","error","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","scrollTo","handleRouteInfoError","loadErrorFail","page","fetchComponent","gipErr","routeInfoErr","cachedRouteInfo","isValidElementType","require","getDataHref","_getData","_getStaticData","_getServerData","beforePopState","cb","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","hash","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","Promise","all","prefetchData","priority","cancel","componentResult","loadPage","fn","cacheKey","resolve","ctx","AppTree"],"mappings":"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","sourcesContent":["/* global __NEXT_DATA__ */\n// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n  getLocationOrigin,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport {\n  removePathTrailingSlash,\n  normalizePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\n\ninterface TransitionOptions {\n  shallow?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState = null | { __N: false } | ({ __N: true } & NextHistoryState)\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nexport function hasBasePath(path: string): boolean {\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return basePath && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(basePath)\n      : basePath + path\n    : path\n}\n\nexport function delBasePath(path: string): string {\n  return path.slice(basePath.length) || '/'\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  if (url.startsWith('/')) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(currentPath: string, href: Url): string {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n')\n  const urlAsString =\n    typeof href === 'string' ? href : formatWithValidation(href)\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    // if the origin didn't change, it means we received a relative href\n    return finalUrl.origin === base.origin\n      ? finalUrl.href.slice(finalUrl.origin.length)\n      : finalUrl.href\n  } catch (_) {\n    return urlAsString\n  }\n}\n\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR')\nexport function markLoadingError(err: Error): Error {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {})\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as,\n  }\n}\n\nfunction tryParseRelativeUrl(\n  url: string\n): null | ReturnType<typeof parseRelativeUrl> {\n  try {\n    return parseRelativeUrl(url)\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      setTimeout(() => {\n        throw new Error(\n          `Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`\n        )\n      }, 0)\n    }\n    return null\n  }\n}\n\ntype ComponentRes = { page: ComponentType; mod: any }\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n}\n\ntype RouteInfo = {\n  Component: ComponentType\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: any\n  err?: Error\n  error?: any\n}\n\ntype Subscription = (data: RouteInfo, App?: ComponentType) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      throw new Error(`Failed to load static props`)\n    }\n\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: RouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: ComponentType) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      App: ComponentType\n      wrapApp: (App: ComponentType) => any\n      err?: Error\n      isFallback: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = { Component: App }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n      // @ts-ignore this is temporarily global (attached to window)\n      isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL()\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n\n          let scrollDebounceTimeout: undefined | NodeJS.Timeout\n\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout)\n\n            scrollDebounceTimeout = setTimeout(() => {\n              const { url, as: curAs, options } = history.state\n              this.changeState(\n                'replaceState',\n                url,\n                curAs,\n                Object.assign({}, options, {\n                  _N_X: window.scrollX,\n                  _N_Y: window.scrollY,\n                })\n              )\n            }, 10)\n          }\n\n          window.addEventListener('scroll', debouncedScrollSave)\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    const { url, as, options } = state\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change('replaceState', url, as, options)\n  }\n\n  update(route: string, mod: any) {\n    const Component: ComponentType = mod.default || mod\n    const data = this.components[route]\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`)\n    }\n\n    const newData = Object.assign({}, data, {\n      Component,\n      __N_SSG: mod.__N_SSG,\n      __N_SSP: mod.__N_SSP,\n    })\n    this.components[route] = newData\n\n    // pages/_app.js updated\n    if (route === '/_app') {\n      this.notify(this.components[this.route])\n      return\n    }\n\n    if (route === this.route) {\n      this.notify(newData)\n    }\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute)\n    }\n\n    const cleanedAs = hasBasePath(as) ? delBasePath(as) : as\n    this._inFlightRoute = as\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!(options as any)._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as)\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route])\n      Router.events.emit('hashChangeComplete', as)\n      return true\n    }\n\n    const parsed = tryParseRelativeUrl(url)\n\n    if (!parsed) return false\n\n    let { pathname, searchParams } = parsed\n    const query = searchParamsToUrlQuery(searchParams)\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState'\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    const { shallow = false } = options\n\n    if (isDynamicRoute(route)) {\n      const { pathname: asPathname } = parseRelativeUrl(cleanedAs)\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      if (!routeMatch) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n              `Read more: https://err.sh/vercel/next.js/incompatible-href-as`\n          )\n        }\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as)\n\n    try {\n      const routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        shallow\n      )\n      const { error } = routeInfo\n\n      Router.events.emit('beforeHistoryChange', as)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      await this.set(route, pathname!, query, cleanedAs, routeInfo)\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs)\n        throw error\n      }\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo((options as any)._N_X, (options as any)._N_Y)\n        }\n      }\n      Router.events.emit('routeChangeComplete', as)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    loadErrorFail?: boolean\n  ): Promise<RouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      const { page: Component } = await this.fetchComponent('/_error')\n      const routeInfo: RouteInfo = { Component, err, error: err }\n\n      try {\n        routeInfo.props = await this.getInitialProps(Component, {\n          err,\n          pathname,\n          query,\n        } as any)\n      } catch (gipErr) {\n        console.error('Error in error page `getInitialProps`: ', gipErr)\n        routeInfo.props = {}\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true)\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    shallow: boolean = false\n  ): Promise<RouteInfo> {\n    try {\n      const cachedRouteInfo = this.components[route]\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo\n      }\n\n      const routeInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then(\n            (res) =>\n              ({\n                Component: res.page,\n                __N_SSG: res.mod.__N_SSG,\n                __N_SSP: res.mod.__N_SSP,\n              } as RouteInfo)\n          )\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          as,\n          __N_SSG\n        )\n      }\n\n      const props = await this._getData<RouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n              } as any\n            )\n      )\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: RouteInfo\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    const parsed = tryParseRelativeUrl(url)\n\n    if (!parsed) return\n\n    const { pathname } = parsed\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    await Promise.all([\n      this.pageLoader.prefetchData(url, asPath),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<ComponentRes> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (process.env.NODE_ENV === 'production' && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    return fetchNextData(dataHref, this.isSsr)\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string): void {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as)\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(data: RouteInfo): Promise<void> {\n    return this.sub(data, this.components['/_app'].Component)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}