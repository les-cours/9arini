{"ast":null,"code":"var _jsxFileName = \"/home/chouaib/code/learn/frontend/containers/Formik/Form.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { Button } from 'baseui/button';\nimport { Block } from 'baseui/block';\nimport FormikFormControl from './FormikFormControl';\nimport Field from './Field';\nimport { dataSchema, uiSchema } from './schemas';\nfunction Form({\n  initialValues,\n  dataSchema,\n  uiSchema,\n  onSubmit\n}) {\n  const {\n    fields: fieldsData\n  } = dataSchema;\n  const {\n    sections\n  } = uiSchema;\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validate: values => validateDataSchema({\n      values,\n      dataSchema\n    }),\n    validateOnBlur: false,\n    validateOnChange: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, ({\n    handleSubmit,\n    values,\n    touched\n  }) => {\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, sections.map(section => {\n      const {\n        title,\n        fields\n      } = section;\n      return __jsx(Block, {\n        key: title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, fields.map(fieldName => {\n        const field = fieldsData[fieldName];\n        if (!field) {\n          throw new Error('Wrong field name in ui schema');\n        }\n        if (!areFieldConditionsFulfilled({\n          values,\n          field\n        })) {\n          return null;\n        }\n        return __jsx(FormikFormControl, {\n          key: fieldName,\n          name: fieldName,\n          label: field.label,\n          caption: field.caption,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 23\n          }\n        }, __jsx(Field, {\n          field: field,\n          name: fieldName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }\n        }));\n      }));\n    }), __jsx(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"Submit\"));\n  });\n}\nfunction validateDataSchema({\n  values,\n  dataSchema\n}) {\n  const {\n    fields\n  } = dataSchema;\n  let errors = {};\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName];\n    if (!field.required) {\n      return;\n    }\n    if (areFieldConditionsFulfilled({\n      values,\n      field\n    })) {\n      const value = getFieldValue({\n        name: fieldName,\n        field,\n        values\n      });\n      // this check should depend on the field type\n      if (value === undefined || values === '' || value === null) {\n        errors[fieldName] = `Field \"${fieldName}\" is required`;\n      }\n    }\n  });\n  console.log('errors', errors);\n  return errors;\n}\nconst areFieldConditionsFulfilled = ({\n  values,\n  field\n}) => {\n  const {\n    condition\n  } = field;\n  if (!condition || condition.rules.length === 0) {\n    return true;\n  }\n  const {\n    rules,\n    operator\n  } = condition;\n  let areRulesRespected = true;\n  let i = 0;\n  while (areRulesRespected && i < rules.length) {\n    const {\n      field: fieldName,\n      value\n    } = rules[i];\n    const fieldValue = getFieldValue({\n      name: fieldName,\n      field,\n      values\n    });\n    const isRuleRespected = fieldValue === value;\n    areRulesRespected = operator === 'AND' ? areRulesRespected && isRuleRespected : areRulesRespected || isRuleRespected;\n    i++;\n  }\n  return areRulesRespected;\n};\nconst getFieldValue = ({\n  name,\n  field,\n  values\n}) => {\n  if (values[name] === undefined) {\n    return undefined;\n  }\n  switch (field.type) {\n    case 'text':\n    case 'textarea':\n    case 'integer':\n    case 'checkbox':\n    case 'radio':\n    case 'date':\n      return values[name];\n    case 'select':\n      return values[name].values;\n  }\n};\nexport default function ExampleFormFormik() {\n  return __jsx(Form, {\n    initialValues: {\n      name: '',\n      email: '',\n      dateOfBirth: '',\n      favoriteColor: [],\n      aboutYourself: '',\n      radioGroup: '',\n      profileStatus: ''\n    },\n    dataSchema: dataSchema,\n    uiSchema: uiSchema,\n    onSubmit: values => alert(JSON.stringify(values, null, 4)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"names":["React","Formik","Button","Block","FormikFormControl","Field","dataSchema","uiSchema","Form","initialValues","onSubmit","fields","fieldsData","sections","__jsx","validate","values","validateDataSchema","validateOnBlur","validateOnChange","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","touched","map","section","title","key","fieldName","field","Error","areFieldConditionsFulfilled","name","label","caption","type","errors","Object","keys","forEach","required","value","getFieldValue","undefined","console","log","condition","rules","length","operator","areRulesRespected","i","fieldValue","isRuleRespected","ExampleFormFormik","email","dateOfBirth","favoriteColor","aboutYourself","radioGroup","profileStatus","alert","JSON","stringify"],"sources":["/home/chouaib/code/learn/frontend/containers/Formik/Form.tsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport { Button } from 'baseui/button';\nimport { Block } from 'baseui/block';\nimport FormikFormControl from './FormikFormControl';\nimport Field from './Field';\nimport { FormDataSchema, FormUISchema, FormField } from './types';\nimport { dataSchema, uiSchema } from './schemas';\n\ninterface FormProps {\n  initialValues: { [key: string]: any };\n  dataSchema: FormDataSchema;\n  uiSchema: FormUISchema;\n  onSubmit: (values: any) => void;\n}\n\nfunction Form({ initialValues, dataSchema, uiSchema, onSubmit }: FormProps) {\n  const { fields: fieldsData } = dataSchema;\n  const { sections } = uiSchema;\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validate={values => validateDataSchema({ values, dataSchema })}\n      validateOnBlur={false}\n      validateOnChange={false}\n    >\n      {({ handleSubmit, values, touched }) => {\n        return (\n          <form onSubmit={handleSubmit}>\n            {sections.map(section => {\n              const { title, fields } = section;\n              return (\n                <Block key={title}>\n                  {fields.map(fieldName => {\n                    const field = fieldsData[fieldName];\n\n                    if (!field) {\n                      throw new Error('Wrong field name in ui schema');\n                    }\n\n                    if (!areFieldConditionsFulfilled({ values, field })) {\n                      return null;\n                    }\n\n                    return (\n                      <FormikFormControl\n                        key={fieldName}\n                        name={fieldName}\n                        label={field.label}\n                        caption={field.caption}\n                      >\n                        <Field field={field} name={fieldName} />\n                      </FormikFormControl>\n                    );\n                  })}\n                </Block>\n              );\n            })}\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n}\n\nfunction validateDataSchema({\n  values,\n  dataSchema,\n}: {\n  values: any;\n  dataSchema: FormDataSchema;\n}) {\n  const { fields } = dataSchema;\n  let errors = {};\n\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName];\n\n    if (!field.required) {\n      return;\n    }\n\n    if (areFieldConditionsFulfilled({ values, field })) {\n      const value = getFieldValue({ name: fieldName, field, values });\n      // this check should depend on the field type\n      if (value === undefined || values === '' || value === null) {\n        errors[fieldName] = `Field \"${fieldName}\" is required`;\n      }\n    }\n  });\n\n  console.log('errors', errors);\n  return errors;\n}\n\nconst areFieldConditionsFulfilled = ({\n  values,\n  field,\n}: {\n  values: any;\n  field: FormField;\n}): boolean => {\n  const { condition } = field;\n  if (!condition || condition.rules.length === 0) {\n    return true;\n  }\n\n  const { rules, operator } = condition;\n\n  let areRulesRespected = true;\n  let i = 0;\n  while (areRulesRespected && i < rules.length) {\n    const { field: fieldName, value } = rules[i];\n\n    const fieldValue = getFieldValue({ name: fieldName, field, values });\n    const isRuleRespected = fieldValue === value;\n\n    areRulesRespected =\n      operator === 'AND'\n        ? areRulesRespected && isRuleRespected\n        : areRulesRespected || isRuleRespected;\n    i++;\n  }\n  return areRulesRespected;\n};\n\nconst getFieldValue = ({\n  name,\n  field,\n  values,\n}: {\n  name: string;\n  field: FormField;\n  values: any;\n}): any => {\n  if (values[name] === undefined) {\n    return undefined;\n  }\n  switch (field.type) {\n    case 'text':\n    case 'textarea':\n    case 'integer':\n    case 'checkbox':\n    case 'radio':\n    case 'date':\n      return values[name];\n    case 'select':\n      return values[name].values;\n  }\n};\n\nexport default function ExampleFormFormik() {\n  return (\n    <Form\n      initialValues={{\n        name: '',\n        email: '',\n        dateOfBirth: '',\n        favoriteColor: [],\n        aboutYourself: '',\n        radioGroup: '',\n        profileStatus: '',\n      }}\n      dataSchema={dataSchema}\n      uiSchema={uiSchema}\n      onSubmit={values => alert(JSON.stringify(values, null, 4))}\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}