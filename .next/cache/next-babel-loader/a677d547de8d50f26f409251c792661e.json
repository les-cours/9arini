{"ast":null,"code":"var _jsxFileName = \"/home/chouaib/code/learn/frontend/contexts/context.utils.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport function createCtxWithReducer(reducer, initialState) {\n  const defaultDispatch = () => initialState;\n  const stateCtx = React.createContext(initialState);\n  const dispatchCtx = React.createContext(defaultDispatch);\n  function useStateCtx(property) {\n    const state = React.useContext(stateCtx);\n    if (state === undefined) {\n      throw new Error('useCountState must be used within a CountProvider');\n    }\n    return state[property]; // only one depth selector for comparison\n  }\n  function useDispatchCtx() {\n    const context = React.useContext(dispatchCtx);\n    if (context === undefined) {\n      throw new Error('useCountDispatch must be used within a CountProvider');\n    }\n    return context;\n  }\n  function Provider({\n    children\n  }) {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    return __jsx(dispatchCtx.Provider, {\n      value: dispatch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, __jsx(stateCtx.Provider, {\n      value: state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, children));\n  }\n  // return [ctx, Provider] as const;\n  return [useStateCtx, useDispatchCtx, Provider];\n}\n\n// create context with no upfront defaultValue\n// without having to do undefined check all the time\nexport function createCtx() {\n  const ctx = React.createContext(undefined);\n  function useCtx() {\n    const c = React.useContext(ctx);\n    if (!c) throw new Error('useCtx must be inside a Provider with a value');\n    return c;\n  }\n  return [useCtx, ctx.Provider]; // make TypeScript infer a tuple, not an array of union types\n}","map":{"version":3,"names":["React","createCtxWithReducer","reducer","initialState","defaultDispatch","stateCtx","createContext","dispatchCtx","useStateCtx","property","state","useContext","undefined","Error","useDispatchCtx","context","Provider","children","dispatch","useReducer","__jsx","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","createCtx","ctx","useCtx","c"],"sources":["/home/chouaib/code/learn/frontend/contexts/context.utils.tsx"],"sourcesContent":["import React from 'react';\nexport function createCtxWithReducer<StateType, ActionType>(\n  reducer: React.Reducer<StateType, ActionType>,\n  initialState: StateType\n) {\n  const defaultDispatch: React.Dispatch<ActionType> = () => initialState;\n  const stateCtx = React.createContext(initialState);\n  const dispatchCtx = React.createContext(defaultDispatch);\n  function useStateCtx<K extends keyof StateType>(property: K) {\n    const state = React.useContext(stateCtx);\n    if (state === undefined) {\n      throw new Error('useCountState must be used within a CountProvider');\n    }\n    return state[property]; // only one depth selector for comparison\n  }\n\n  function useDispatchCtx() {\n    const context = React.useContext(dispatchCtx);\n    if (context === undefined) {\n      throw new Error('useCountDispatch must be used within a CountProvider');\n    }\n    return context;\n  }\n\n  function Provider({ children }: React.PropsWithChildren<{}>) {\n    const [state, dispatch] = React.useReducer<\n      React.Reducer<StateType, ActionType>\n    >(reducer, initialState);\n    return (\n      <dispatchCtx.Provider value={dispatch}>\n        <stateCtx.Provider value={state}>{children}</stateCtx.Provider>\n      </dispatchCtx.Provider>\n    );\n  }\n  // return [ctx, Provider] as const;\n  return [useStateCtx, useDispatchCtx, Provider] as const;\n}\n\n// create context with no upfront defaultValue\n// without having to do undefined check all the time\nexport function createCtx<A>() {\n  const ctx = React.createContext<A | undefined>(undefined);\n  function useCtx() {\n    const c = React.useContext(ctx);\n    if (!c) throw new Error('useCtx must be inside a Provider with a value');\n    return c;\n  }\n  return [useCtx, ctx.Provider] as const; // make TypeScript infer a tuple, not an array of union types\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,SAASC,oBAAoBA,CAClCC,OAA6C,EAC7CC,YAAuB,EACvB;EACA,MAAMC,eAA2C,GAAGA,CAAA,KAAMD,YAAY;EACtE,MAAME,QAAQ,GAAGL,KAAK,CAACM,aAAa,CAACH,YAAY,CAAC;EAClD,MAAMI,WAAW,GAAGP,KAAK,CAACM,aAAa,CAACF,eAAe,CAAC;EACxD,SAASI,WAAWA,CAA4BC,QAAW,EAAE;IAC3D,MAAMC,KAAK,GAAGV,KAAK,CAACW,UAAU,CAACN,QAAQ,CAAC;IACxC,IAAIK,KAAK,KAAKE,SAAS,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;IACtE;IACA,OAAOH,KAAK,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC1B;EAEA,SAASK,cAAcA,CAAA,EAAG;IACxB,MAAMC,OAAO,GAAGf,KAAK,CAACW,UAAU,CAACJ,WAAW,CAAC;IAC7C,IAAIQ,OAAO,KAAKH,SAAS,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;IACzE;IACA,OAAOE,OAAO;EAChB;EAEA,SAASC,QAAQA,CAAC;IAAEC;EAAsC,CAAC,EAAE;IAC3D,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGlB,KAAK,CAACmB,UAAU,CAExCjB,OAAO,EAAEC,YAAY,CAAC;IACxB,OACEiB,KAAA,CAACb,WAAW,CAACS,QAAQ;MAACK,KAAK,EAAEH,QAAS;MAAAI,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACpCP,KAAA,CAACf,QAAQ,CAACW,QAAQ;MAACK,KAAK,EAAEX,KAAM;MAAAY,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAEV,QAA4B,CAC1C,CAAC;EAE3B;EACA;EACA,OAAO,CAACT,WAAW,EAAEM,cAAc,EAAEE,QAAQ,CAAC;AAChD;;AAEA;AACA;AACA,OAAO,SAASY,SAASA,CAAA,EAAM;EAC7B,MAAMC,GAAG,GAAG7B,KAAK,CAACM,aAAa,CAAgBM,SAAS,CAAC;EACzD,SAASkB,MAAMA,CAAA,EAAG;IAChB,MAAMC,CAAC,GAAG/B,KAAK,CAACW,UAAU,CAACkB,GAAG,CAAC;IAC/B,IAAI,CAACE,CAAC,EAAE,MAAM,IAAIlB,KAAK,CAAC,+CAA+C,CAAC;IACxE,OAAOkB,CAAC;EACV;EACA,OAAO,CAACD,MAAM,EAAED,GAAG,CAACb,QAAQ,CAAC,CAAU,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module"}