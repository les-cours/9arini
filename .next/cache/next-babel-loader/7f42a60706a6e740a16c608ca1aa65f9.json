{"ast":null,"code":"var _jsxFileName = \"/home/chouaib/code/learn/frontend/apollo/producthunt.client.js\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nlet globalApolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = _ref => {\n    let {\n        apolloClient,\n        apolloState\n      } = _ref,\n      pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  // Set the correct displayName in development\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = ctx.apolloClient = initApolloClient();\n\n      // Run wrapped getInitialProps methods\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {};\n\n      // Only on the server:\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/client/react/ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 15\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n  return globalApolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // const token = getToken();\n    const token = process.env.NEXT_PUBLIC_PRODUCT_HUNT_AUTH_TOKEN;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? `Bearer ${token}` : ''\n      })\n    };\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_PRODUCT_HUNT_CLIENT_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin'\n  });\n  const ssrMode = true;\n  const cache = new InMemoryCache().restore(initialState);\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: authLink.concat(httpLink),\n    cache\n  });\n}","map":{"version":3,"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","setContext","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","_ref","apolloClient","apolloState","pageProps","_objectWithoutProperties","client","initApolloClient","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","_objectSpread","error","rewind","cache","extract","initialState","createApolloClient","authLink","_","headers","token","process","env","NEXT_PUBLIC_PRODUCT_HUNT_AUTH_TOKEN","authorization","httpLink","uri","NEXT_PUBLIC_APOLLO_PRODUCT_HUNT_CLIENT_URL","credentials","ssrMode","restore","link","concat"],"sources":["/home/chouaib/code/learn/frontend/apollo/producthunt.client.js"],"sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nlet globalApolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const { AppTree } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      // Run wrapped getInitialProps methods\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\n              '@apollo/client/react/ssr'\n            );\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const authLink = setContext((_, { headers }) => {\n    // const token = getToken();\n    const token = process.env.NEXT_PUBLIC_PRODUCT_HUNT_AUTH_TOKEN;\n\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_PRODUCT_HUNT_CLIENT_URL, // Server URL (must be absolute)\n    credentials: 'same-origin',\n  });\n\n  const ssrMode = typeof window === 'undefined';\n  const cache = new InMemoryCache().restore(initialState);\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: authLink.concat(httpLink),\n    cache,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}