{"ast":null,"code":"var _jsxFileName = \"/home/chouaib/code/learn/frontend/containers/Formik/Form.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { Button } from 'baseui/button';\nimport { Block } from 'baseui/block';\nimport FormikFormControl from './FormikFormControl';\nimport Field from './Field';\nimport { dataSchema, uiSchema } from './schemas';\nfunction Form(_ref) {\n  var _this = this;\n  var initialValues = _ref.initialValues,\n    dataSchema = _ref.dataSchema,\n    uiSchema = _ref.uiSchema,\n    onSubmit = _ref.onSubmit;\n  var fieldsData = dataSchema.fields;\n  var sections = uiSchema.sections;\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validate: function validate(values) {\n      return validateDataSchema({\n        values: values,\n        dataSchema: dataSchema\n      });\n    },\n    validateOnBlur: false,\n    validateOnChange: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n      values = _ref2.values,\n      touched = _ref2.touched;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, sections.map(function (section) {\n      var title = section.title,\n        fields = section.fields;\n      return __jsx(Block, {\n        key: title,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, fields.map(function (fieldName) {\n        var field = fieldsData[fieldName];\n        if (!field) {\n          throw new Error('Wrong field name in ui schema');\n        }\n        if (!areFieldConditionsFulfilled({\n          values: values,\n          field: field\n        })) {\n          return null;\n        }\n        return __jsx(FormikFormControl, {\n          key: fieldName,\n          name: fieldName,\n          label: field.label,\n          caption: field.caption,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 23\n          }\n        }, __jsx(Field, {\n          field: field,\n          name: fieldName,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }\n        }));\n      }));\n    }), __jsx(Button, {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"Submit\"));\n  });\n}\n_c = Form;\nfunction validateDataSchema(_ref3) {\n  var values = _ref3.values,\n    dataSchema = _ref3.dataSchema;\n  var fields = dataSchema.fields;\n  var errors = {};\n  Object.keys(fields).forEach(function (fieldName) {\n    var field = fields[fieldName];\n    if (!field.required) {\n      return;\n    }\n    if (areFieldConditionsFulfilled({\n      values: values,\n      field: field\n    })) {\n      var value = getFieldValue({\n        name: fieldName,\n        field: field,\n        values: values\n      });\n      // this check should depend on the field type\n      if (value === undefined || values === '' || value === null) {\n        errors[fieldName] = \"Field \\\"\".concat(fieldName, \"\\\" is required\");\n      }\n    }\n  });\n  console.log('errors', errors);\n  return errors;\n}\nvar areFieldConditionsFulfilled = function areFieldConditionsFulfilled(_ref4) {\n  var values = _ref4.values,\n    field = _ref4.field;\n  var condition = field.condition;\n  if (!condition || condition.rules.length === 0) {\n    return true;\n  }\n  var rules = condition.rules,\n    operator = condition.operator;\n  var areRulesRespected = true;\n  var i = 0;\n  while (areRulesRespected && i < rules.length) {\n    var _rules$i = rules[i],\n      fieldName = _rules$i.field,\n      value = _rules$i.value;\n    var fieldValue = getFieldValue({\n      name: fieldName,\n      field: field,\n      values: values\n    });\n    var isRuleRespected = fieldValue === value;\n    areRulesRespected = operator === 'AND' ? areRulesRespected && isRuleRespected : areRulesRespected || isRuleRespected;\n    i++;\n  }\n  return areRulesRespected;\n};\nvar getFieldValue = function getFieldValue(_ref5) {\n  var name = _ref5.name,\n    field = _ref5.field,\n    values = _ref5.values;\n  if (values[name] === undefined) {\n    return undefined;\n  }\n  switch (field.type) {\n    case 'text':\n    case 'textarea':\n    case 'integer':\n    case 'checkbox':\n    case 'radio':\n    case 'date':\n      return values[name];\n    case 'select':\n      return values[name].values;\n  }\n};\nexport default function ExampleFormFormik() {\n  return __jsx(Form, {\n    initialValues: {\n      name: '',\n      email: '',\n      dateOfBirth: '',\n      favoriteColor: [],\n      aboutYourself: '',\n      radioGroup: '',\n      profileStatus: ''\n    },\n    dataSchema: dataSchema,\n    uiSchema: uiSchema,\n    onSubmit: function onSubmit(values) {\n      return alert(JSON.stringify(values, null, 4));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  });\n}\n_c2 = ExampleFormFormik;\nvar _c, _c2;\n$RefreshReg$(_c, \"Form\");\n$RefreshReg$(_c2, \"ExampleFormFormik\");","map":{"version":3,"names":["React","Formik","Button","Block","FormikFormControl","Field","dataSchema","uiSchema","Form","_ref","_this","initialValues","onSubmit","fieldsData","fields","sections","__jsx","validate","values","validateDataSchema","validateOnBlur","validateOnChange","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_ref2","handleSubmit","touched","map","section","title","key","fieldName","field","Error","areFieldConditionsFulfilled","name","label","caption","type","_c","_ref3","errors","Object","keys","forEach","required","value","getFieldValue","undefined","concat","console","log","_ref4","condition","rules","length","operator","areRulesRespected","i","_rules$i","fieldValue","isRuleRespected","_ref5","ExampleFormFormik","email","dateOfBirth","favoriteColor","aboutYourself","radioGroup","profileStatus","alert","JSON","stringify","_c2","$RefreshReg$"],"sources":["/home/chouaib/code/learn/frontend/containers/Formik/Form.tsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport { Button } from 'baseui/button';\nimport { Block } from 'baseui/block';\nimport FormikFormControl from './FormikFormControl';\nimport Field from './Field';\nimport { FormDataSchema, FormUISchema, FormField } from './types';\nimport { dataSchema, uiSchema } from './schemas';\n\ninterface FormProps {\n  initialValues: { [key: string]: any };\n  dataSchema: FormDataSchema;\n  uiSchema: FormUISchema;\n  onSubmit: (values: any) => void;\n}\n\nfunction Form({ initialValues, dataSchema, uiSchema, onSubmit }: FormProps) {\n  const { fields: fieldsData } = dataSchema;\n  const { sections } = uiSchema;\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validate={values => validateDataSchema({ values, dataSchema })}\n      validateOnBlur={false}\n      validateOnChange={false}\n    >\n      {({ handleSubmit, values, touched }) => {\n        return (\n          <form onSubmit={handleSubmit}>\n            {sections.map(section => {\n              const { title, fields } = section;\n              return (\n                <Block key={title}>\n                  {fields.map(fieldName => {\n                    const field = fieldsData[fieldName];\n\n                    if (!field) {\n                      throw new Error('Wrong field name in ui schema');\n                    }\n\n                    if (!areFieldConditionsFulfilled({ values, field })) {\n                      return null;\n                    }\n\n                    return (\n                      <FormikFormControl\n                        key={fieldName}\n                        name={fieldName}\n                        label={field.label}\n                        caption={field.caption}\n                      >\n                        <Field field={field} name={fieldName} />\n                      </FormikFormControl>\n                    );\n                  })}\n                </Block>\n              );\n            })}\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        );\n      }}\n    </Formik>\n  );\n}\n\nfunction validateDataSchema({\n  values,\n  dataSchema,\n}: {\n  values: any;\n  dataSchema: FormDataSchema;\n}) {\n  const { fields } = dataSchema;\n  let errors = {};\n\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName];\n\n    if (!field.required) {\n      return;\n    }\n\n    if (areFieldConditionsFulfilled({ values, field })) {\n      const value = getFieldValue({ name: fieldName, field, values });\n      // this check should depend on the field type\n      if (value === undefined || values === '' || value === null) {\n        errors[fieldName] = `Field \"${fieldName}\" is required`;\n      }\n    }\n  });\n\n  console.log('errors', errors);\n  return errors;\n}\n\nconst areFieldConditionsFulfilled = ({\n  values,\n  field,\n}: {\n  values: any;\n  field: FormField;\n}): boolean => {\n  const { condition } = field;\n  if (!condition || condition.rules.length === 0) {\n    return true;\n  }\n\n  const { rules, operator } = condition;\n\n  let areRulesRespected = true;\n  let i = 0;\n  while (areRulesRespected && i < rules.length) {\n    const { field: fieldName, value } = rules[i];\n\n    const fieldValue = getFieldValue({ name: fieldName, field, values });\n    const isRuleRespected = fieldValue === value;\n\n    areRulesRespected =\n      operator === 'AND'\n        ? areRulesRespected && isRuleRespected\n        : areRulesRespected || isRuleRespected;\n    i++;\n  }\n  return areRulesRespected;\n};\n\nconst getFieldValue = ({\n  name,\n  field,\n  values,\n}: {\n  name: string;\n  field: FormField;\n  values: any;\n}): any => {\n  if (values[name] === undefined) {\n    return undefined;\n  }\n  switch (field.type) {\n    case 'text':\n    case 'textarea':\n    case 'integer':\n    case 'checkbox':\n    case 'radio':\n    case 'date':\n      return values[name];\n    case 'select':\n      return values[name].values;\n  }\n};\n\nexport default function ExampleFormFormik() {\n  return (\n    <Form\n      initialValues={{\n        name: '',\n        email: '',\n        dateOfBirth: '',\n        favoriteColor: [],\n        aboutYourself: '',\n        radioGroup: '',\n        profileStatus: '',\n      }}\n      dataSchema={dataSchema}\n      uiSchema={uiSchema}\n      onSubmit={values => alert(JSON.stringify(values, null, 4))}\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}