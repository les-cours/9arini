{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { db, getTimeStamp } from './initialize';\nexport function convertCollectionsSnapshotToMap(snapshots) {\n  return snapshots.docs.reduce((accumulator, collection) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\nexport async function getNewDocRef(collectionName) {\n  return await db.collection(collectionName).doc();\n}\nexport async function addDocument(collectionName, documentData) {\n  const data = _objectSpread(_objectSpread({}, documentData), {}, {\n    createdAt: getTimeStamp()\n  });\n  return await db.collection(collectionName).add(data).then(docRef => docRef.id);\n}\nexport async function deleteDocument(collectionName, id) {\n  return await db.collection(collectionName).doc(id).delete().then(() => id);\n}\nexport async function updateDocument(collectionName, documentData) {\n  const data = _objectSpread(_objectSpread({}, documentData), {}, {\n    updatedAt: getTimeStamp()\n  });\n  return await db.collection(collectionName).doc(documentData.id).update(data).then(() => documentData.id);\n}\nexport async function setDocument(collectionName, documentData) {\n  const data = _objectSpread(_objectSpread({}, documentData), {}, {\n    updatedAt: getTimeStamp()\n  });\n  return await db.collection(collectionName).doc(documentData.id).set(data, {\n    merge: true\n  }).then(() => documentData.id);\n}\nexport async function getDocuments(collectionName) {\n  return await db.collection(collectionName).orderBy('createdAt', 'desc').get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread(_objectSpread({}, doc.data()), {}, {\n    id: doc.id\n  })));\n}\nexport async function getDocumentsByQuery(collectionName, query) {\n  console.log(...query, collectionName, 'test');\n  return await db.collection(collectionName)\n  // @ts-ignore\n  .where(...query).get().then(querySnapshot => querySnapshot.docs.map(doc => _objectSpread({\n    id: doc.id\n  }, doc.data())));\n}\nexport async function deleteDocuments(collectionName) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef.get().then(querySnapshot => querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id))));\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};","map":{"version":3,"names":["db","getTimeStamp","convertCollectionsSnapshotToMap","snapshots","docs","reduce","accumulator","collection","id","data","getNewDocRef","collectionName","doc","addDocument","documentData","_objectSpread","createdAt","add","then","docRef","deleteDocument","delete","updateDocument","updatedAt","update","setDocument","set","merge","getDocuments","orderBy","get","querySnapshot","map","getDocumentsByQuery","query","console","log","where","deleteDocuments","collectionRef","batch","commit","addCollectionAndDocuments","collectionKey","objectsToAdd","forEach","obj","newDocRef"],"sources":["/home/chouaib/code/learn/frontend/firebase/service.ts"],"sourcesContent":["import { db, getTimeStamp } from './initialize';\n\nexport function convertCollectionsSnapshotToMap(snapshots: any) {\n  return snapshots.docs.reduce((accumulator: any, collection: any) => {\n    accumulator[collection.id] = collection.data();\n    return accumulator;\n  }, {});\n}\n\nexport async function getNewDocRef(collectionName: any) {\n  return await db.collection(collectionName).doc();\n}\n\nexport async function addDocument(collectionName: any, documentData: any) {\n  const data = { ...documentData, createdAt: getTimeStamp() };\n  return await db\n    .collection(collectionName)\n    .add(data)\n    .then(docRef => docRef.id);\n}\n\nexport async function deleteDocument(collectionName: any, id: string) {\n  return await db\n    .collection(collectionName)\n    .doc(id)\n    .delete()\n    .then(() => id);\n}\n\nexport async function updateDocument(collectionName: any, documentData: any) {\n  const data = { ...documentData, updatedAt: getTimeStamp() };\n  return await db\n    .collection(collectionName)\n    .doc(documentData.id)\n    .update(data)\n    .then(() => documentData.id);\n}\n\nexport async function setDocument(collectionName: any, documentData: any) {\n  const data = { ...documentData, updatedAt: getTimeStamp() };\n  return await db\n    .collection(collectionName)\n    .doc(documentData.id)\n    .set(data, { merge: true })\n    .then(() => documentData.id);\n}\n\nexport async function getDocuments(collectionName: string) {\n  return await db\n    .collection(collectionName)\n    .orderBy('createdAt', 'desc')\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }))\n    );\n}\nexport async function getDocumentsByQuery(collectionName: any, query: any) {\n  console.log(...query, collectionName, 'test');\n\n  return await db\n    .collection(collectionName)\n    // @ts-ignore\n    .where(...query)\n    .get()\n    .then((querySnapshot: any) =>\n      querySnapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() }))\n    );\n}\n\nexport async function deleteDocuments(collectionName: any) {\n  const collectionRef = db.collection(collectionName);\n  var batch = db.batch();\n  await collectionRef\n    .get()\n    .then(querySnapshot =>\n      querySnapshot.docs.map(doc => batch.delete(collectionRef.doc(doc.id)))\n    );\n\n  return await batch.commit().then(() => {\n    console.log('Batch Deletion successfully committed!');\n  });\n}\n\nexport const addCollectionAndDocuments = async (\n  collectionKey: any,\n  objectsToAdd: any\n) => {\n  const collectionRef = db.collection(collectionKey);\n  const batch = db.batch();\n  objectsToAdd.forEach((obj: any) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit().then(() => {\n    console.log('Batch Addition successfully committed!');\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}